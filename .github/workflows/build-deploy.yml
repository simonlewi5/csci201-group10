name: Build and Deploy

on:
  push:
    # branches:
    #   - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    permissions:
        id-token: write
        contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Authenticate with Google Cloud'
        uses: google-github-actions/auth@v0.4.0
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
      - name: 'Retrieve DB password'
        run: |
          echo "DB_PASSWORD=$(gcloud secrets versions access latest --secret=db_password)" >> $GITHUB_ENV
      - name: 'Retrieve DB host'
        run: |
          echo "DB_HOST=$(gcloud sql instances describe game-db --format='value(ipAddresses[0].ipAddress)')" >> $GITHUB_ENV
      - name: "Set up Go"
        uses: actions/setup-go@v2
        with:
          go-version: '1.22'

      - name: "Install dependencies"
        run: go mod download
        working-directory: ./game-server

      - name: "Build the go executable"
        run: |
          go build -o bin/game-server cmd/server/main.go
        working-directory: ./game-server
        env:
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          DB_HOST: ${{ env.DB_HOST }}
          DB_USER: admin
          DB_NAME: game-db

      - name: 'Prepare server'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GAME_SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /opt/game-server
            sudo chown -R ${{ secrets.SSH_USERNAME }} /opt/game-server
            sudo mkdir -p /var/log/game-server
            sudo chown ${{ secrets.SSH_USERNAME }}: /var/log/game-server

      - name: 'Copy game-server binary to game-server'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.GAME_SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: './game-server/bin/game-server'
          target: '/opt/game-server'

      - name: 'Copy kill script to game-server'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.GAME_SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: './game-server/scripts/kill.sh'
          target: '/opt/game-server'
          overwrite: true
          strip_components: 2

      - name: 'Kill existing game-server process'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GAME_SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            bash /opt/game-server/scripts/kill.sh

      - name: 'Execute game-server binary'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GAME_SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export DB_PASS=${{ env.DB_PASSWORD }}
            export DB_HOST=${{ env.DB_HOST }}
            export DB_USER=admin
            export DB_NAME=game-db
            echo "${{ secrets.GCP_CREDENTIALS_BASE64}}" | base64 --decode > /tmp/gcp-credentials.json
            export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-credentials.json
            chmod +x /opt/game-server/game-server/bin/game-server
            nohup /opt/game-server/game-server/bin/game-server > /var/log/game-server/game-server.log 2>&1 &
            rm /tmp/gcp-credentials.json
      - name: 'Give actions user permissions for static content'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GAME_SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo chown -R ${{ secrets.SSH_USERNAME }} /var/www/html
            sudo chmod -R 755 /var/www/html
      - name: 'Copy static content to server'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.GAME_SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: './game-server/www/*'
          target: '/var/www/html'
          overwrite: true
          strip_components: 2
      - name: 'Restart Nginx'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GAME_SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo systemctl restart nginx
